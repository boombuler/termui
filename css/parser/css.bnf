!blockComment    : '/' '*' {. | '*'} '*' '/' ;

_whitespace      : ' ' | '\t' | '\n' | '\r' ;
_id_chars        : 'a' - 'z' | 'A' - 'Z' | '_' | '-';
_digits          :  '0' - '9';
id               : _id_chars {_id_chars | _digits};
int              : { _digits};
float            : [_digits] '.' _digits { _digits};
ws               : _whitespace {_whitespace};

<<
import css "github.com/boombuler/termui/css"
import internal "github.com/boombuler/termui/css/internal"
>>

CSS              : ws Rules                                       <<$1, nil>>
                 | Rules                                          <<$0, nil>>
                 | error;

Rules            : Rule Rules                                     <<append($1.(internal.Rules), $0.(internal.Rule)), nil>>
                 | Rule                                           <<internal.Rules{$0.(internal.Rule) }, nil>>
                 ;

Rule             : SelectorWS CBOpen Properties CBClose           <<internal.Rule{$0.(css.Selector), $2.(internal.PropertyValues)}, nil>>
                 ;

SelectorWS       : Selector ws                                    <<$0, nil>>
                 ;
Selector         : SimpleSelector                                 <<$0, nil>>
                 | ChildSelector                                  <<$0, nil>>
                 ;

SimpleSelector   : NamedSelector                                  <<$0, nil>>
                 | AttrSelectors                                  <<$0, nil>>
                 | NamedSelector AttrSelectors                    <<$0, nil>>
                 ;

AttrSelectors    : AttrSelector AttrSelectors                     <<append($1.(css.AndSelector), $0.(css.Selector)), nil>>
                 | AttrSelector                                   <<css.AndSelector{$0.(css.Selector)}, nil>>
                 ;

AttrSelector     : "#"id                                          <<css.IdSelector(str($1)), nil>>
                 | ":"id                                          <<css.PseudoClassSelector(str($1)), nil>>
                 | "."id                                          <<css.ClassSelector(str($1)), nil>>
                 ;


NamedSelector    : id                                             <<css.NameSelector(str($0)), nil>>
                 | "*"                                            <<css.AnySelector, nil>>
                 | "body"                                         <<css.BodySelector, nil>>
                 ;

ChildSelector    : SelectorWS Gt SimpleSelector                   <<css.ParentSelector{$0.(css.Selector), $2.(css.Selector)}, nil>>
                 | Selector ws SimpleSelector                     <<css.AnyParentSelector{$0.(css.Selector), $2.(css.Selector)}, nil>>
                 ;


Value            : Value ws                                        <<$0, nil>>
                 | id                                              <<str($0), nil>>
                 | int                                             <<str($0), nil>>
                 | float                                           <<str($0), nil>>
                 ;
Values           : Value Pipe Values                               <<append($2.([]string), $0.(string)), nil>>
                 | Value                                           <<[]string{$0.(string)}, nil>>
                 ;

Properties       : Property Properties                             <<append($1.(internal.PropertyValues), $0.(internal.PropertyValue)), nil>>
                 | Property                                        << internal.PropertyValues{$0.(internal.PropertyValue)}, nil >>
                 ;

Propertyname     : Propertyname ws                                 <<$0, nil>>
                 | id ws ":"                                       <<str($0), nil>>
                 | id ":"                                          <<str($0), nil>>
                 ;
Property         : Propertyname Values Semicolon                   << internal.PropertyValue { $0.(string), $1 }, nil >>
                 ;

Gt               : Gt ws
                 | ">"
                 ;
Semicolon        : Semicolon ws
                 | ";"
                 ;
Pipe             : Pipe ws
                 | "|"
                 ;
CBOpen           : CBOpen ws
                 | "{"
                 ;
CBClose          : CBClose ws
                 | "}"
                 ;
